plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

group = 'de.rusticprism'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        url = uri('https://mvn.exceptionflug.de/repository/exceptionflug-public/')
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.2.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.2.0-SNAPSHOT"
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
    compileOnly("dev.simplix:protocolize-api:2.2.6")
    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.0'
    implementation files('C:/Users/Anwender/Desktop/Plugins/VEssentials/velocity-proxy.jar')
    }


def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = 16
    targetCompatibility = 16
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}
jar {
    manifest {
        attributes 'Main-Class': 'de.rusticprism.vessentials.VEssentials'
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from { configurations.runtimeClasspath.collect {
        it.isDirectory() ? it : zipTree(it) } }
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
